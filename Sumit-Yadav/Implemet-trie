class TrieNode {
    TrieNode[] node = new TrieNode[26];
    Boolean isWord = false;
    
    public TrieNode() {
        
    }
}

class Trie {
    
    TrieNode root = new TrieNode();

    public Trie() {
        for(int i = 0 ; i < 26 ; i++) {
            root.node[i] = null;
        }
        root.isWord = false;
    }
    
    public void insert(String word) {
        TrieNode temp = root;
        for(int i = 0 ; i < word.length() ; i++) {
            int index = word.charAt(i) - 'a';
            if(temp.node[index] == null) {
                temp.node[index] = new TrieNode();
            }
            temp = temp.node[index];
        }
        temp.isWord = true;
    }
    
    public boolean search(String word) {
        TrieNode temp = root;
        for(int i = 0 ; i < word.length() ; i++) {
            int index = word.charAt(i) - 'a';
            if(temp.node[index] == null) {
                return false;
            }
            temp = temp.node[index];
        }
        if(temp.isWord) return true;
        else return false;
    }
    
    public boolean startsWith(String prefix) {
        TrieNode temp = root;
        for(int i = 0 ; i < prefix.length() ; i++) {
            int index = prefix.charAt(i) - 'a';
            if(temp.node[index] == null) {
                return false;
            }
            temp = temp.node[index];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */